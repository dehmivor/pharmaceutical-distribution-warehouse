'use client';

import { useState, useCallback } from 'react';
import axios from 'axios';
import { useRole } from '@/contexts/RoleContext'; // Import useRole

const backendUrl = 'http://localhost:5000';

const useInspection = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [apiDebugInfo, setApiDebugInfo] = useState(null);

  // ‚úÖ S·ª≠ d·ª•ng useRole ƒë·ªÉ l·∫•y th√¥ng tin user
  const { user, isLoading: userLoading } = useRole();

  const getAuthHeaders = useCallback(() => {
    const token = localStorage.getItem('auth-token');
    const headers = {
      'Content-Type': 'application/json',
      Accept: 'application/json'
    };

    if (token) {
      headers.Authorization = `Bearer ${token}`;
      console.log('üîë Token found:', token.substring(0, 20) + '...');
    } else {
      console.warn('‚ö†Ô∏è No auth token found in localStorage');
    }

    return headers;
  }, []);

  const getCurrentUserId = useCallback(() => {
    // Fallback: l·∫•y t·ª´ localStorage
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser);
        return parsedUser.userId || parsedUser._id || parsedUser.id; // ‚úÖ Th√™m c√°c tr∆∞·ªùng kh√°c
      } catch (e) {
        console.warn('‚ö†Ô∏è Failed to parse stored user data');
      }
    }

    // Fallback cu·ªëi: hardcode (ch·ªâ d√πng cho development)
    console.warn('‚ö†Ô∏è Using fallback user ID - this should not happen in production');
    return '685aba038d7e1e2eb3d86bd1';
  }, [user]);

  const createInspection = useCallback(
    async (inspectionData) => {
      setLoading(true);
      setError(null);

      try {
        console.log('üîç Raw inspection data:', inspectionData);

        if (userLoading) {
          throw new Error('ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng, vui l√≤ng th·ª≠ l·∫°i');
        }

        const currentUserId = getCurrentUserId();

        if (!currentUserId) {
          throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }

        if (!inspectionData.import_order_id) {
          throw new Error('Import Order ID is required');
        }

        // ‚úÖ S·ª≠ d·ª•ng user ID th·ª±c t·∫ø thay v√¨ hardcode
        const transformedData = {
          import_order_id: inspectionData.import_order_id, // ‚úÖ S·ª≠ d·ª•ng gi√° tr·ªã th·ª±c
          batch_id: inspectionData.batch_id || null,
          actual_quantity: Number(inspectionData.total_received || inspectionData.actual_quantity || 0),
          rejected_quantity: Number(inspectionData.total_returned || inspectionData.rejected_quantity || 0),
          note: String(inspectionData.notes || inspectionData.note || ''),
          created_by: currentUserId // ‚úÖ S·ª≠ d·ª•ng user ID th·ª±c t·∫ø
        };

        console.log('üì§ Transformed data:', transformedData);
        console.log('üë§ Current user:', { id: currentUserId, name: user?.name || 'Unknown' });

        if (transformedData.actual_quantity < 0 || transformedData.rejected_quantity < 0) {
          throw new Error('S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c √¢m');
        }

        const headers = getAuthHeaders();
        const response = await axios.post('/api/inspections', transformedData, {
          headers,
          baseURL: backendUrl
        });

        console.log('‚úÖ Create inspection success:', response.data);
        return response.data;
      } catch (error) {
        console.error('‚ùå Create inspection error:', {
          originalData: inspectionData,
          currentUser: user,
          error: error.response?.data || error.message
        });

        let errorMessage = 'C√≥ l·ªói x·∫£y ra khi t·∫°o phi·∫øu ki·ªÉm h√†ng';

        if (error.response?.status === 500) {
          errorMessage = `L·ªói server: ${error.response?.data?.message || 'Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i l√™n'}`;
        } else if (error.response?.data?.message) {
          errorMessage = error.response.data.message;
        } else if (error.message) {
          errorMessage = error.message;
        }

        setError(errorMessage);
        throw new Error(errorMessage);
      } finally {
        setLoading(false);
      }
    },
    [getAuthHeaders, getCurrentUserId, user, userLoading]
  );

  const fetchInspectionForApprove = useCallback(
    async (params = {}) => {
      setLoading(true);
      setError(null);
      try {
        const headers = getAuthHeaders();
        const response = await axios.get('/api/inspections/inspection-for-approve', {
          headers,
          baseURL: backendUrl,
          params
        });
        return response.data;
      } catch (error) {
        let errorMessage = 'C√≥ l·ªói khi l·∫•y danh s√°ch ki·ªÉm h√†ng ch·ªù duy·ªát';
        if (error.response?.data?.message) {
          errorMessage = error.response.data.message;
        } else if (error.message) {
          errorMessage = error.message;
        }
        setError(errorMessage);
        throw new Error(errorMessage);
      } finally {
        setLoading(false);
      }
    },
    [getAuthHeaders]
  );

  return {
    loading,
    error,
    apiDebugInfo,
    userLoading,

    createInspection,
    fetchInspectionForApprove,

    clearError: useCallback(() => setError(null), []),
    checkAuthStatus: useCallback(() => {
      const token = localStorage.getItem('auth-token');
      return {
        isAuthenticated: !!token,
        token: token ? token.substring(0, 20) + '...' : null,
        user: user,
        userId: getCurrentUserId()
      };
    }, [user, getCurrentUserId]),

    getCurrentUserId
  };
};

export default useInspection;
