'use client';
import { useAuth } from '@/hooks/useAuth';
import { emailSchema } from '@/utils/validationSchema';
import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import CircularProgress from '@mui/material/CircularProgress';
import FormHelperText from '@mui/material/FormHelperText';
import Grid from '@mui/material/Grid';
import InputAdornment from '@mui/material/InputAdornment';
import InputLabel from '@mui/material/InputLabel';
import OutlinedInput from '@mui/material/OutlinedInput';
import Typography from '@mui/material/Typography';
import { useTheme } from '@mui/material/styles';
import { IconEye, IconEyeOff } from '@tabler/icons-react';
import { useRouter } from 'next/navigation';
import PropTypes from 'prop-types';
import { useState } from 'react';
import { useForm } from 'react-hook-form';

export default function ActiveAccount({ inputSx }) {
  const router = useRouter();
  const theme = useTheme();
  const [isPasswordOpen, setIsPasswordOpen] = useState(false);
  const [isConfirmPasswordOpen, setIsConfirmPasswordOpen] = useState(false);
  const [activationError, setActivationError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  const { activateAccount, loading } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors }
  } = useForm();

  // Watch password ƒë·ªÉ validate confirm password[2]
  const watchPassword = watch('newPassword', '');

  // Custom validation schemas
  const newPasswordSchema = {
    required: 'M·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc',
    minLength: {
      value: 6,
      message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
    },
    pattern: {
      value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
      message: 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë'
    }
  };

  const confirmPasswordSchema = {
    required: 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc',
    validate: (value) => {
      if (value !== watchPassword) {
        return 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
      }
      return true;
    }
  };

  const otpSchema = {
    required: 'M√£ OTP l√† b·∫Øt bu·ªôc',
    pattern: {
      value: /^\d{6}$/,
      message: 'M√£ OTP ph·∫£i l√† 6 ch·ªØ s·ªë'
    }
  };

  const handleActivation = async (formData) => {
    try {
      setActivationError('');
      setSuccessMessage('');

      const result = await activateAccount({
        email: formData.email,
        newPassword: formData.newPassword,
        otp: formData.otp
      });

      if (result.success) {
        setSuccessMessage('K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...');

        // Redirect sau 2 gi√¢y
        setTimeout(() => {
          const redirectUrl = result.data.redirectUrl || '/dashboard';
          router.push(redirectUrl);
        }, 2000);
      } else {
        setActivationError(result.message || 'K√≠ch ho·∫°t t√†i kho·∫£n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      setActivationError(error.message || 'K√≠ch ho·∫°t t√†i kho·∫£n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const commonIconProps = { size: 16, color: theme.palette.grey[700] };

  return (
    <form onSubmit={handleSubmit(handleActivation)} autoComplete="off">
      <Grid container rowSpacing={2.5} columnSpacing={1.5}>
        {/* Email Field */}
        <Grid size={12}>
          <InputLabel>Email</InputLabel>
          <OutlinedInput
            {...register('email', emailSchema)}
            placeholder="example@saasable.io"
            fullWidth
            error={Boolean(errors.email)}
            sx={{ ...inputSx }}
          />
          {errors.email?.message && <FormHelperText error>{errors.email?.message}</FormHelperText>}
        </Grid>

        {/* OTP Field */}
        <Grid size={12}>
          <InputLabel>M√£ OTP</InputLabel>
          <OutlinedInput
            {...register('otp', otpSchema)}
            placeholder="Nh·∫≠p m√£ OTP 6 ch·ªØ s·ªë"
            fullWidth
            error={Boolean(errors.otp)}
            inputProps={{ maxLength: 6 }}
            sx={{ ...inputSx }}
          />
          {errors.otp?.message && <FormHelperText error>{errors.otp?.message}</FormHelperText>}
          <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, display: 'block' }}>
            M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n
          </Typography>
        </Grid>

        {/* New Password Field */}
        <Grid size={12}>
          <InputLabel>M·∫≠t kh·∫©u m·ªõi</InputLabel>
          <OutlinedInput
            {...register('newPassword', newPasswordSchema)}
            type={isPasswordOpen ? 'text' : 'password'}
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
            fullWidth
            error={Boolean(errors.newPassword)}
            endAdornment={
              <InputAdornment
                position="end"
                sx={{ cursor: 'pointer', WebkitTapHighlightColor: 'transparent' }}
                onClick={() => setIsPasswordOpen(!isPasswordOpen)}
              >
                {isPasswordOpen ? <IconEye {...commonIconProps} /> : <IconEyeOff {...commonIconProps} />}
              </InputAdornment>
            }
            sx={inputSx}
          />
          {errors.newPassword?.message && <FormHelperText error>{errors.newPassword?.message}</FormHelperText>}
        </Grid>

        {/* Confirm Password Field */}
        <Grid size={12}>
          <InputLabel>X√°c nh·∫≠n m·∫≠t kh·∫©u</InputLabel>
          <OutlinedInput
            {...register('confirmPassword', confirmPasswordSchema)}
            type={isConfirmPasswordOpen ? 'text' : 'password'}
            placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
            fullWidth
            error={Boolean(errors.confirmPassword)}
            endAdornment={
              <InputAdornment
                position="end"
                sx={{ cursor: 'pointer', WebkitTapHighlightColor: 'transparent' }}
                onClick={() => setIsConfirmPasswordOpen(!isConfirmPasswordOpen)}
              >
                {isConfirmPasswordOpen ? <IconEye {...commonIconProps} /> : <IconEyeOff {...commonIconProps} />}
              </InputAdornment>
            }
            sx={inputSx}
            onPaste={(e) => {
              // Prevent paste trong confirm password field[4]
              e.preventDefault();
              return false;
            }}
          />
          {errors.confirmPassword?.message && <FormHelperText error>{errors.confirmPassword?.message}</FormHelperText>}
        </Grid>

        {/* Information Alert */}
        <Grid size={12}>
          <Alert severity="info" sx={{ mt: 1 }}>
            <Typography variant="body2" sx={{ fontWeight: 500, mb: 1 }}>
              üìß H∆∞·ªõng d·∫´n k√≠ch ho·∫°t t√†i kho·∫£n:
            </Typography>
            <Typography variant="body2" component="div">
              ‚Ä¢ Nh·∫≠p email b·∫°n ƒë√£ ƒëƒÉng k√Ω
              <br />
              ‚Ä¢ Nh·∫≠p m√£ OTP ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email
              <br />
              ‚Ä¢ T·∫°o m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n
              <br />‚Ä¢ M√£ OTP c√≥ hi·ªáu l·ª±c trong 24 gi·ªù
            </Typography>
          </Alert>
        </Grid>
      </Grid>

      <Grid container sx={{ mt: 3 }}>
        <Grid size={12}>
          <Button
            type="submit"
            color="primary"
            variant="contained"
            disabled={loading}
            endIcon={loading && <CircularProgress color="secondary" size={16} />}
            sx={{ width: 200 }}
          >
            {loading ? 'ƒêang k√≠ch ho·∫°t...' : 'K√≠ch ho·∫°t t√†i kho·∫£n'}
          </Button>
        </Grid>
      </Grid>

      {/* Success Message */}
      {successMessage && (
        <Alert sx={{ mt: 2 }} severity="success" variant="filled">
          {successMessage}
        </Alert>
      )}

      {/* Error Message */}
      {activationError && (
        <Alert sx={{ mt: 2 }} severity="error" variant="filled" icon={false}>
          {activationError}
        </Alert>
      )}
    </form>
  );
}

ActiveAccount.propTypes = { inputSx: PropTypes.any };
