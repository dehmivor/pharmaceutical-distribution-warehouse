// services/authService.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const constants = require('../utils/constants');
const { sendOTPEmail } = require('./emailService');
const getRedirectByRole = require('../utils/directUrl');
const crypto = require('crypto');

const authService = {
  register: async (userData) => {
    try {
      const { email, password, fullName, role } = userData;

      console.log('üìù AuthService.register called:', email);

      // Validate required fields
      if (!email || !password) {
        return {
          success: false,
          message: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc',
        };
      }

      // Check if user already exists
      const existingUser = User.findOne({
        email: email.toLowerCase().trim(),
      });

      if (existingUser) {
        return {
          success: false,
          message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
        };
      }

      // Hash password
      const saltRounds = 12;
      const hashedPassword = bcrypt.hash(password, saltRounds);

      // Create new user
      const newUser = new User({
        email: email.toLowerCase().trim(),
        password: hashedPassword,
        role: role || constants.USER_ROLES.WAREHOUSE,
        status: constants.BASIC_STATUSES.ACTIVE,
      });

      const savedUser = newUser.save();

      return {
        success: true,
        data: {
          user: {
            id: savedUser._id,
            email: savedUser.email,
            fullName: fullName || savedUser.email.split('@')[0], // Fallback name
            role: savedUser.role,
            status: savedUser.status,
            is_manager: savedUser.is_manager,
          },
        },
      };
    } catch (error) {
      console.error('‚ùå Register service error:', error);

      // Handle specific MongoDB errors
      if (error.code === 11000) {
        return {
          success: false,
          message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
        };
      }

      if (error.name === 'ValidationError') {
        const messages = Object.values(error.errors).map((err) => err.message);
        return {
          success: false,
          message: messages.join(', '),
        };
      }

      return {
        success: false,
        message: 'L·ªói server khi ƒëƒÉng k√Ω',
      };
    }
  },

  loginStep1: async function (email, password) {
    try {
      if (!email || !password) {
        return {
          success: false,
          message: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc',
        };
      }

      // Find user by email
      const user = await User.findOne({
        email: email.toLowerCase().trim(),
      });

      if (!user) {
        return {
          success: false,
          message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c',
        };
      }

      // Check user status
      if (user.status !== constants.BASIC_STATUSES.ACTIVE) {
        return {
          success: false,
          message: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông',
        };
      }

      // Verify password
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return {
          success: false,
          message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c',
        };
      }

      // T·∫°o OTP
      const otp = Math.floor(100000 + Math.random() * 900000).toString();
      const otpExpiry = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

      await User.findByIdAndUpdate(user._id, {
        otp_login: {
          code: otp,
          expiry_time: otpExpiry,
        },
      });

      await sendOTPEmail(user.email, otp);

      const tempToken = jwt.sign(
        { userId: user._id, step: 'otp_verification' },
        process.env.JWT_SECRET,
        { expiresIn: '1d' },
      );

      return {
        success: true,
        message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
        data: {
          tempToken,
          email: user.email,
        },
      };
    } catch (error) {
      console.error('‚ùå AuthService.loginStep1 error:', error);
      return {
        success: false,
        message: 'L·ªói server khi ƒëƒÉng nh·∫≠p',
      };
    }
  },

  loginStep2: async function (tempToken, otp) {
    try {
      if (!tempToken || !otp) {
        return {
          success: false,
          message: 'Token v√† OTP l√† b·∫Øt bu·ªôc',
        };
      }

      // Verify temp token
      let decoded;
      try {
        decoded = jwt.verify(tempToken, process.env.JWT_SECRET);
        console.log('üìù Decoded token:', decoded);
      } catch (error) {
        console.error('‚ùå Token verification error:', error);
        return {
          success: false,
          message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
        };
      }

      if (decoded.step !== 'otp_verification') {
        console.error('‚ùå Invalid token step:', decoded.step);
        return {
          success: false,
          message: 'Token kh√¥ng h·ª£p l·ªá',
        };
      }

      // Find user
      const user = await User.findById(decoded.userId);
      if (!user) {
        console.error('‚ùå User not found:', decoded.userId);
        return {
          success: false,
          message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i',
        };
      }

      console.log('üìù User OTP data:', {
        storedOTP: user.otp_login?.code,
        receivedOTP: otp,
        expiryTime: user.otp_login?.expiry_time,
        currentTime: new Date(),
      });

      if (!user.otp_login) {
        console.error('‚ùå No OTP data found for user');
        return {
          success: false,
          message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
        };
      }

      if (user.otp_login.code !== otp) {
        console.error('‚ùå OTP mismatch:', {
          stored: user.otp_login.code,
          received: otp,
        });
        return {
          success: false,
          message: 'OTP kh√¥ng ch√≠nh x√°c',
        };
      }

      if (user.otp_login.expiry_time < new Date()) {
        console.error('‚ùå OTP expired:', {
          expiryTime: user.otp_login.expiry_time,
          currentTime: new Date(),
        });
        return {
          success: false,
          message: 'OTP ƒë√£ h·∫øt h·∫°n',
        };
      }

      // X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
      await User.findByIdAndUpdate(user._id, {
        $unset: { otp_login: 1 },
      });

      // Generate final tokens
      const token = jwt.sign(
        {
          userId: user._id,
          email: user.email,
          role: user.role,
          is_manager: user.is_manager,
        },
        process.env.JWT_SECRET,
        { expiresIn: '1d' },
      );

      const refreshToken = jwt.sign(
        { userId: user._id },
        process.env.REFRESH_TOKEN_SECRET || process.env.JWT_SECRET,
        { expiresIn: '7d' },
      );

      const redirectUrl = getRedirectByRole(user.role);
      console.log('üìù Login successful, redirecting to:', redirectUrl);

      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            fullName: user.email.split('@')[0],
            role: user.role,
            status: user.status,
            is_manager: user.is_manager,
          },
          token,
          refreshToken,
          redirectUrl,
        },
      };
    } catch (error) {
      console.error('‚ùå AuthService.loginStep2 error:', error);
      return {
        success: false,
        message: 'L·ªói server khi x√°c th·ª±c OTP',
      };
    }
  },

  login: async (email, password) => {
    try {
      if (!process.env.JWT_SECRET) {
        console.error('‚ùå JWT_SECRET not configured');
        throw new Error('JWT configuration missing');
      }

      if (!email || !password) {
        return {
          success: false,
          message: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc',
        };
      }

      // Find user by email
      const user = await User.findOne({
        email: email.toLowerCase().trim(),
      });

      if (!user) {
        return {
          success: false,
          message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c',
        };
      }
      // Check user status
      if (user.status !== constants.BASIC_STATUSES.ACTIVE) {
        return {
          success: false,
          message: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông',
        };
      }


      // Verify password
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return {
          success: false,
          message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c',
        };
      }

      // Generate tokens
      const token = jwt.sign(
        {
          userId: user._id,
          email: user.email,
          role: user.role,
          is_manager: user.is_manager,
        },
        process.env.JWT_SECRET,
        { expiresIn: '1d' },
      );

      const refreshToken = jwt.sign(
        { userId: user._id },
        process.env.REFRESH_TOKEN_SECRET || process.env.JWT_SECRET,
        { expiresIn: '7d' },
      );


      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            fullName: user.email.split('@')[0], // Fallback name since model doesn't have fullName
            role: user.role,
            status: user.status,
            is_manager: user.is_manager,
          },
          token,
          refreshToken,
        },
      };
    } catch (error) {
      console.error('‚ùå AuthService.login error:', error);
      return {
        success: false,
        message: 'L·ªói server khi ƒëƒÉng nh·∫≠p',
      };
    }
  },

  verifyToken: async (token) => {
    try {
      // ‚úÖ Enhanced input validation
      if (!token) {
        throw new Error('No token provided');
      }

      if (typeof token !== 'string') {
        throw new Error(`Token must be a string, received: ${typeof token}`);
      }

      // Clean token
      token = token.trim();

      if (token === '') {
        throw new Error('Token cannot be empty');
      }

      // ‚úÖ Enhanced JWT format validation
      const parts = token.split('.');
      if (parts.length !== 3) {
        console.error('‚ùå JWT Format Error:', {
          receivedParts: parts.length,
          expectedParts: 3,
          tokenPreview: token.substring(0, 50) + '...',
          fullToken: process.env.NODE_ENV === 'development' ? token : '[HIDDEN]',
        });
        throw new Error(`Invalid JWT format: expected 3 parts, got ${parts.length}`);
      }

      // Validate each part is not empty
      const emptyPartIndex = parts.findIndex((part) => !part || part.length === 0);
      if (emptyPartIndex !== -1) {
        throw new Error(`JWT part ${emptyPartIndex + 1} is empty`);
      }

      // ‚úÖ Enhanced JWT verification with better error handling
      let decoded;
      try {
        decoded = jwt.verify(token, process.env.JWT_SECRET);
      } catch (jwtError) {
        if (jwtError.name === 'TokenExpiredError') {
          throw new Error('Token has expired');
        }
        if (jwtError.name === 'JsonWebTokenError') {
          throw new Error('Invalid token signature');
        }
        throw new Error(`Token verification failed: ${jwtError.message}`);
      }

      // ‚úÖ Enhanced payload validation
      const requiredFields = ['userId', 'email'];
      const missingFields = requiredFields.filter((field) => !decoded[field]);

      if (missingFields.length > 0) {
        throw new Error(`Invalid token payload: missing fields: ${missingFields.join(', ')}`);
      }

      // ‚úÖ Additional security checks
      if (decoded.exp && decoded.exp < Math.floor(Date.now() / 1000)) {
        throw new Error('Token has expired');
      }

      console.log('‚úÖ Token verification successful:', {
        userId: decoded.userId,
        email: decoded.email,
        role: decoded.role,
        expiresAt: decoded.exp ? new Date(decoded.exp * 1000).toISOString() : 'No expiry',
      });

      return decoded;
    } catch (error) {
      console.error('üîê Token verification failed:', {
        message: error.message,
        tokenProvided: !!token,
        tokenLength: token?.length,
        tokenType: typeof token,
      });
      throw error;
    }
  },

  refreshToken: async (refreshToken) => {
    try {
      console.log('üîÑ Refreshing token...');

      const decoded = jwt.verify(
        refreshToken,
        process.env.REFRESH_TOKEN_SECRET || process.env.JWT_SECRET,
      );

      // Find user and verify they still exist and are active
      const user = await User.findById(decoded.userId);
      if (!user) {
        return {
          success: false,
          message: 'User not found',
        };
      }

      if (user.status !== constants.BASIC_STATUSES.ACTIVE) {
        return {
          success: false,
          message: 'User account is inactive',
        };
      }

      // Generate new tokens
      const newToken = jwt.sign(
        {
          userId: user._id,
          email: user.email,
          role: user.role,
          is_manager: user.is_manager,
        },
        process.env.JWT_SECRET,
        { expiresIn: '1d' },
      );

      const newRefreshToken = jwt.sign(
        { userId: user._id },
        process.env.REFRESH_TOKEN_SECRET || process.env.JWT_SECRET,
        { expiresIn: '7d' },
      );

      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            fullName: user.email.split('@')[0], // Fallback name
            role: user.role,
            status: user.status,
            is_manager: user.is_manager,
          },
          token: newToken,
          refreshToken: newRefreshToken,
        },
      };
    } catch (error) {
      console.error('‚ùå Refresh token error:', error);
      return {
        success: false,
        message: 'Invalid refresh token',
      };
    }
  },

  logout: async (token) => {
    try {
      console.log('üëã Logging out...');

      // TODO: Implement token blacklisting in database
      // You can create a BlacklistedToken model or add blacklisted tokens to user document

      // For now, just log the logout
      if (token) {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log(`User ${decoded.userId} logged out`);
      }

      console.log('‚úÖ Logout successful');
      return {
        success: true,
        message: 'Logout successful',
      };
    } catch (error) {
      console.error('‚ùå Logout error:', error);
      return {
        success: false,
        message: 'Logout failed',
      };
    }
  },

  getUserById: async (userId) => {
    try {
      const user = await User.findById(userId);
      if (!user) {
        return {
          success: false,
          message: 'User not found',
        };
      }

      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            fullName: user.email.split('@')[0], // Fallback name
            role: user.role,
            status: user.status,
            is_manager: user.is_manager,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt,
          },
        },
      };
    } catch (error) {
      console.error('‚ùå Get user error:', error);
      return {
        success: false,
        message: 'Error fetching user data',
      };
    }
  },

  updateUser: async (userId, updateData) => {
    try {
      const allowedUpdates = ['role', 'status', 'is_manager'];
      const updates = {};

      // Filter allowed updates
      for (const field of allowedUpdates) {
        if (updateData[field] !== undefined) {
          updates[field] = updateData[field];
        }
      }

      const user = await User.findByIdAndUpdate(userId, updates, {
        new: true,
        runValidators: true,
      });

      if (!user) {
        return {
          success: false,
          message: 'User not found',
        };
      }

      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            fullName: user.email.split('@')[0],
            role: user.role,
            status: user.status,
            is_manager: user.is_manager,
          },
        },
      };
    } catch (error) {
      console.error('‚ùå Update user error:', error);
      return {
        success: false,
        message: 'Error updating user',
      };
    }
  },

  // H·ªßy t·∫•t c·∫£ tokens c·ªßa user
  getUserByEmail: async (email) => {
    try {
      const user = await User.findOne({
        email: email.toLowerCase().trim(),
      });

      if (!user) {
        return {
          success: false,
          message: 'User not found',
        };
      }

      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            role: user.role,
            status: user.status,
          },
        },
      };
    } catch (error) {
      console.error('‚ùå Get user by email error:', error);
      return {
        success: false,
        message: 'Error fetching user data',
      };
    }
  },

  generateResetToken: async (userId) => {
    try {
      console.log('üîÑ Generating reset token for user:', userId);

      // T·∫°o token ng·∫´u nhi√™n
      const resetToken = crypto.randomBytes(32).toString('hex');
      const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

      // Th·ªùi gian h·∫øt h·∫°n 10 ph√∫t
      const tokenExpiry = new Date(Date.now() + 10 * 60 * 1000);

      // C·∫≠p nh·∫≠t user v·ªõi token reset (l∆∞u token ƒë√£ hash)
      await User.findByIdAndUpdate(userId, {
        otp_reset: {
          code: hashedToken,
          expiry_time: tokenExpiry,
        },
      });

      console.log('‚úÖ Reset token generated successfully');
      return resetToken; // Tr·∫£ v·ªÅ token g·ªëc ƒë·ªÉ g·ª≠i email
    } catch (error) {
      console.error('‚ùå Generate reset token error:', error);
      throw new Error('Failed to generate reset token');
    }
  },

  // S·ª≠a l·∫°i h√†m verifyResetToken ƒë·ªÉ verify token thay v√¨ OTP
  verifyResetToken: async (token) => {
    try {
      console.log('üîç Verifying reset token...');

      if (!token) {
        return {
          success: false,
          message: 'Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p',
        };
      }

      // Hash token ƒë·ªÉ so s√°nh v·ªõi database
      const hashedToken = crypto.createHash('sha256').update(token).digest('hex');

      const user = await User.findOne({
        'otp_reset.code': hashedToken,
        'otp_reset.expiry_time': { $gt: new Date() },
      });

      if (!user) {
        return {
          success: false,
          message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
        };
      }

      console.log('‚úÖ Reset token is valid');
      return {
        success: true,
        data: {
          userId: user._id,
          email: user.email,
        },
      };
    } catch (error) {
      console.error('‚ùå Verify reset token error:', error);
      return {
        success: false,
        message: 'Failed to verify reset token',
      };
    }
  },

  // S·ª≠a l·∫°i h√†m resetPassword ƒë·ªÉ nh·∫≠n token thay v√¨ email + OTP
  resetPassword: async (token, newPassword) => {
    try {
      console.log('üîÑ Resetting password with token...');

      if (!token || !newPassword) {
        return {
          success: false,
          message: 'Token v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc',
        };
      }

      // Verify token tr∆∞·ªõc
      const verifyResult = await authService.verifyResetToken(token);
      if (!verifyResult.success) {
        return verifyResult;
      }

      const user = await User.findById(verifyResult.data.userId);
      if (!user) {
        return {
          success: false,
          message: 'User not found',
        };
      }

      // Hash password m·ªõi
      const saltRounds = 12;
      const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

      // C·∫≠p nh·∫≠t password v√† x√≥a token reset
      await User.findByIdAndUpdate(user._id, {
        password: hashedPassword,
        $unset: {
          otp_reset: 1,
        },
      });

      console.log(`‚úÖ Password reset successful for user ${user.email}`);
      return {
        success: true,
        data: {
          user: {
            id: user._id,
            email: user.email,
            role: user.role,
          },
        },
      };
    } catch (error) {
      console.error('‚ùå Reset password error:', error);
      return {
        success: false,
        message: 'L·ªói khi reset password',
      };
    }
  },

  activateAccount: async (activationData) => {
    try {
      console.log('üîÑ Processing activation for:', activationData.email);

      const { email, otp, newPassword } = activationData;

      // 1. Validate ƒë·∫ßu v√†o
      if (!email || !otp || !newPassword) {
        throw new Error('Email, OTP v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc');
      }

      // Validate OTP format
      if (!/^\d{6}$/.test(otp)) {
        throw new Error('OTP ph·∫£i l√† 6 ch·ªØ s·ªë');
      }

      // Validate password strength
      if (newPassword.length < 6) {
        throw new Error('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      }

      console.log('‚úÖ Input validation passed');

      // 2. T√¨m user v·ªõi email
      const User = require('../models/User'); // ƒê·∫£m b·∫£o import ƒë√∫ng path
      const user = await User.findOne({
        email: email.toLowerCase().trim(),
      });

      if (!user) {
        console.log('‚ùå User not found:', email);
        throw new Error('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y');
      }

      console.log('‚úÖ User found:', user.email, 'Status:', user.status);

      // 3. Ki·ªÉm tra constants
      const constants = require('../utils/constants'); // ƒê·∫£m b·∫£o import ƒë√∫ng path

      if (user.status === constants.BASIC_STATUSES.ACTIVE) {
        throw new Error('T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t tr∆∞·ªõc ƒë√≥');
      }

      if (user.status !== constants.BASIC_STATUSES.PENDING) {
        throw new Error('T√†i kho·∫£n kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù k√≠ch ho·∫°t');
      }

      // 4. Ki·ªÉm tra OTP
      if (!user.otp_reset || !user.otp_reset.code) {
        console.log('‚ùå No OTP found for user:', email);
        throw new Error('Kh√¥ng t√¨m th·∫•y m√£ OTP. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi');
      }

      // Check expiry
      if (new Date() > user.otp_reset.expiry_time) {
        console.log('‚ùå OTP expired for user:', email);
        await User.findByIdAndUpdate(user._id, {
          $unset: { otp_reset: 1 },
        });
        throw new Error('M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi');
      }

      // Verify OTP
      if (user.otp_reset.code !== otp) {
        console.log('‚ùå Invalid OTP for user:', email);
        throw new Error('M√£ OTP kh√¥ng ƒë√∫ng');
      }

      console.log('‚úÖ OTP validation passed');

      // 5. Hash password
      const bcrypt = require('bcrypt');
      const hashedPassword = await bcrypt.hash(newPassword, 12);

      console.log('‚úÖ Password hashed');

      // 6. Update user
      const updateData = {
        password: hashedPassword,
        status: constants.BASIC_STATUSES.ACTIVE,
        $unset: {
          otp_reset: 1,
        },
      };

      const activatedUser = await User.findByIdAndUpdate(user._id, updateData, {
        new: true,
        runValidators: true,
      }).select('-password');

      if (!activatedUser) {
        throw new Error('Kh√¥ng th·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i');
      }

      console.log('‚úÖ User updated successfully');

      // 7. Generate tokens
      const jwt = require('jsonwebtoken');

      if (!process.env.JWT_SECRET) {
        throw new Error('JWT_SECRET not configured');
      }

      const accessToken = jwt.sign(
        {
          userId: activatedUser._id,
          email: activatedUser.email,
          role: activatedUser.role,
        },
        process.env.JWT_SECRET,
        { expiresIn: '24h' },
      );

      const refreshToken = jwt.sign(
        {
          userId: activatedUser._id,
        },
        process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET,
        { expiresIn: '7d' },
      );

      console.log('‚úÖ Tokens generated');

      return {
        success: true,
        data: {
          user: activatedUser.toObject(),
          token: accessToken,
          refreshToken: refreshToken,
        },
        message: 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!',
      };
    } catch (error) {
      console.error('‚ùå Error in activateAccount service:', error);
      throw error;
    }
  },
};

module.exports = authService;
